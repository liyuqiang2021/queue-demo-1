{"version":3,"sources":["list.js"],"names":["createList","value","createNode","appendList","list","node","x","next","removeFromList","p","data","travelList","fn","node2","node3","node4","console","log"],"mappings":"AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AACxB,SAAOC,UAAU,CAACD,KAAD,CAAjB;AACH,CAFD;;AAGA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOH,KAAP,EAAiB;AAChC,MAAMI,IAAI,GAAGH,UAAU,CAACD,KAAD,CAAvB;AACA,MAAIK,CAAC,GAAGF,IAAR;;AACA,SAAOE,CAAC,CAACC,IAAT,EAAe;AACXD,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACH,GAL+B,CAMhC;;;AACAD,EAAAA,CAAC,CAACC,IAAF,GAASF,IAAT;AACA,SAAOA,IAAP;AACH,CATD;;AAWA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAgB;AACnC,MAAIC,CAAC,GAAGF,IAAR;AACA,MAAIK,CAAC,GAAGJ,IAAR;;AACA,SAAOC,CAAC,KAAKD,IAAN,IAAcC,CAAC,KAAK,IAA3B,EAAiC;AAAE;AAC/BG,IAAAA,CAAC,GAAGH,CAAJ;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACH;;AACD,MAAID,CAAC,KAAK,IAAV,EAAgB;AAAE;AACd,WAAO,KAAP;AACH,GAFD,MAEO,IAAIA,CAAC,KAAKG,CAAV,EAAa;AAAE;AAClBA,IAAAA,CAAC,GAAGH,CAAC,CAACC,IAAN;AACA,WAAOE,CAAP,CAFgB,CAEP;AACZ,GAHM,MAGA;AACHA,IAAAA,CAAC,CAACF,IAAF,GAASD,CAAC,CAACC,IAAX;AACA,WAAOH,IAAP,CAFG,CAES;AACf;AACJ,CAhBD;;AAkBA,IAAMF,UAAU,GAAG,SAAbA,UAAa,CAAAD,KAAK,EAAI;AACxB,SAAO;AACHS,IAAAA,IAAI,EAAET,KADH;AAEHM,IAAAA,IAAI,EAAE;AAFH,GAAP;AAIH,CALD;;AAMA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACP,IAAD,EAAOQ,EAAP,EAAc;AAC7B,MAAIN,CAAC,GAAGF,IAAR;;AACA,SAAOE,CAAC,KAAK,IAAb,EAAmB;AACfM,IAAAA,EAAE,CAACN,CAAD,CAAF;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACH;AACJ,CAND;;AAOA,IAAMH,IAAI,GAAGJ,UAAU,CAAC,EAAD,CAAvB;AACA,IAAMa,KAAK,GAAGV,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACA,IAAMU,KAAK,GAAGX,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACA,IAAMW,KAAK,GAAGZ,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACAO,UAAU,CAACP,IAAD,EAAO,UAAAC,IAAI,EAAI;AACrBW,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACK,IAAjB;AACH,CAFS,CAAV","file":"list.77ef9d65.js","sourceRoot":"..\\src","sourcesContent":["const createList = value => {\r\n    return createNode(value);\r\n};\r\nconst appendList = (list, value) => {\r\n    const node = createNode(value);\r\n    let x = list;\r\n    while (x.next) {\r\n        x = x.next;\r\n    }\r\n    // x.next === null //x为最后一个节点\r\n    x.next = node;\r\n    return node;\r\n};\r\n\r\nconst removeFromList = (list, node) => {\r\n    let x = list;\r\n    let p = node;\r\n    while (x !== node && x !== null) { //如果node不在list中，list就可能为null\r\n        p = x;\r\n        x = x.next;\r\n    }\r\n    if (x === null) { //若list为null，则不需要删除，直接return，false表示无法删除不在list里的节点\r\n        return false\r\n    } else if (x === p) { //这说明要删除的节点是第一个节点\r\n        p = x.next\r\n        return p //如果删除的是第一个节点，那么就要把新list的头节点p返回给外面，即newList=removeFromList(list, list)\r\n    } else {\r\n        p.next = x.next;\r\n        return list //如果删除的不是第一个节点，返回原来的list即可\r\n    }\r\n};\r\n\r\nconst createNode = value => {\r\n    return {\r\n        data: value,\r\n        next: null\r\n    };\r\n};\r\nconst travelList = (list, fn) => {\r\n    let x = list;\r\n    while (x !== null) {\r\n        fn(x);\r\n        x = x.next;\r\n    }\r\n};\r\nconst list = createList(10);\r\nconst node2 = appendList(list, 20);\r\nconst node3 = appendList(list, 30);\r\nconst node4 = appendList(list, 40);\r\ntravelList(list, node => {\r\n    console.log(node.data);\r\n});"]}